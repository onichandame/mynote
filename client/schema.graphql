input ChangePasswordInput {
  password: String!
}

input DateTimeFilter {
  eq: NaiveDateTime
  null: Boolean
  lt: NaiveDateTime
  lte: NaiveDateTime
  gt: NaiveDateTime
  gte: NaiveDateTime
  like: String
  and: [DateTimeFilter!]
  or: [DateTimeFilter!]
  not: Boolean
}

input IntFilter {
  eq: Int
  null: Boolean
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  like: String
  and: [IntFilter!]
  or: [IntFilter!]
  not: Boolean
}

input LoginInput {
  identity: String!
  password: String!
}

type Mutation {
  signup(input: SignupInput!): String!
  login(input: LoginInput!): String!
  renewSession: String!
  changePassword(input: ChangePasswordInput!): Boolean!
  updateUsers(filter: UserFilter, update: UserUpdate!): Int!
  createNote(input: NoteInput!): Note!
  updateNotes(filter: NoteFilter, update: NoteUpdate!): Int!
  deleteNotes(filter: NoteFilter!): Int!
}

# ISO 8601 combined date and time without timezone.
#
# # Examples
#
# * `2015-07-01T08:59:60.123`,
scalar NaiveDateTime

type Note {
  id: Int!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime
  authorId: Int!
  title: String!
  content: String!
}

type NoteConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [NoteEdge!]!

  # A list of nodes.
  nodes: [Note!]!
}

# An edge in a connection.
type NoteEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: Note!
}

enum NoteField {
  ID
  CREATED_AT
  UPDATED_AT
  AUTHOR_ID
  TITLE
  CONTENT
}

input NoteFilter {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  authorId: IntFilter
  title: StringFilter
  content: StringFilter
}

input NoteInput {
  title: String!
  content: String!
}

input NoteSort {
  field: NoteField!
  direction: SortDirection!
}

input NoteUpdate {
  title: String
  content: String
}

# Information about pagination in a connection
type PageInfo {
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

input Pagination {
  first: Int
  after: String
}

type Query {
  users(
    paging: Pagination
    filter: UserFilter
    sorting: [UserSort!]
  ): UserConnection!
  notes(
    paging: Pagination
    filter: NoteFilter
    sorting: [NoteSort!]
  ): NoteConnection!
}

input SignupInput {
  name: String!
  password: String!
  email: String
}

enum SortDirection {
  ASC
  DESC
}

input StringFilter {
  eq: String
  null: Boolean
  lt: String
  lte: String
  gt: String
  gte: String
  like: String
  and: [StringFilter!]
  or: [StringFilter!]
  not: Boolean
}

type Subscription {
  streamNotes(filter: NoteFilter): Note!
}

type User {
  id: Int!
  createdAt: NaiveDateTime!
  updatedAt: NaiveDateTime
  name: String!
  email: String
  avatar: String
}

type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge!]!

  # A list of nodes.
  nodes: [User!]!
}

# An edge in a connection.
type UserEdge {
  # A cursor for use in pagination
  cursor: String!

  # The item at the end of the edge
  node: User!
}

enum UserField {
  ID
  CREATED_AT
  UPDATED_AT
  NAME
  EMAIL
  AVATAR
}

input UserFilter {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  email: StringFilter
  avatar: StringFilter
}

input UserSort {
  field: UserField!
  direction: SortDirection!
}

input UserUpdate {
  name: String
  email: String
  avatar: String
}
