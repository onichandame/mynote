//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use std::error::Error;

use sea_orm::{entity::prelude::*, Set};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub created_at: DateTime,
    pub updated_at: Option<DateTime>,
    pub deleted_at: Option<DateTime>,
    pub name: String,
    pub password: String,
    pub email: Option<String>,
    pub avatar: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::note::Entity")]
    Note,
}

impl Related<super::note::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Note.def()
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn before_save(mut self, insert: bool) -> Result<Self, DbErr> {
        if self.password.is_set() {
            self.password = Set(bcrypt::hash(
                self.password
                    .take()
                    .ok_or(DbErr::Type("password is set but has no value".to_owned()))?,
                bcrypt::DEFAULT_COST,
            )
            .map_err(|_| DbErr::Custom("failed to hash password".to_owned()))?);
        }
        if insert {
            self.created_at = Set(chrono::Utc::now().naive_utc())
        } else {
            self.updated_at = Set(Some(chrono::Utc::now().naive_utc()))
        }
        Ok(self)
    }
}

impl Model {
    pub fn check_password(&self, password: &str) -> Result<bool, Box<dyn Error + Send + Sync>> {
        Ok(bcrypt::verify(password, &self.password)?)
    }
}
