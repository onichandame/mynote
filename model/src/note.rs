//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use sea_orm::{entity::prelude::*, IntoActiveModel, Set};
use serde::Deserialize;

use crate::conversion::IntoActiveValue;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize)]
#[serde(rename_all = "camelCase")]
#[sea_orm(table_name = "notes")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    pub uuid: String,
    pub lamport_clock: i32,
    pub created_at: DateTime,
    pub updated_at: Option<DateTime>,
    pub deleted_at: Option<DateTime>,
    pub user_id: i32,
    pub title: String,
    pub content: String,
}

#[derive(Default)]
pub struct Insert {
    pub uuid: Option<String>,
    pub lamport_clock: Option<i32>,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<Option<DateTime>>,
    pub deleted_at: Option<Option<DateTime>>,
    pub user_id: i32,
    pub title: String,
    pub content: String,
}

#[derive(Default)]
pub struct Update {
    pub deleted_at: Option<Option<DateTime>>,
    pub title: Option<String>,
    pub content: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {
    fn before_save(mut self, insert: bool) -> Result<Self, DbErr> {
        if insert {
            self.lamport_clock = Set(0);
        } else {
            self.lamport_clock = Set(self.lamport_clock.take().ok_or(DbErr::Custom(
                "lamport clock not found before update".to_owned(),
            ))? + 1);
            self.updated_at = if self.updated_at.is_not_set() {
                Set(Some(chrono::Utc::now().naive_utc()))
            } else {
                self.updated_at
            };
        }
        Ok(self)
    }
}

impl IntoActiveModel<ActiveModel> for Insert {
    fn into_active_model(self) -> ActiveModel {
        ActiveModel {
            uuid: self.uuid.into_active_value(),
            lamport_clock: self.lamport_clock.into_active_value(),
            created_at: self.created_at.into_active_value(),
            updated_at: self.updated_at.into_active_value(),
            deleted_at: self.deleted_at.into_active_value(),
            user_id: self.user_id.into_active_value(),
            title: self.title.into_active_value(),
            content: self.content.into_active_value(),
            ..Default::default()
        }
    }
}

impl IntoActiveModel<ActiveModel> for Update {
    fn into_active_model(self) -> ActiveModel {
        ActiveModel {
            deleted_at: self.deleted_at.into_active_value(),
            title: self.title.into_active_value(),
            content: self.content.into_active_value(),
            ..Default::default()
        }
    }
}
